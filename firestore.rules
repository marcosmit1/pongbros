rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isGameParticipant(gameData) {
      return isAuthenticated() && 
        (request.auth.uid in gameData.team1.players || 
         request.auth.uid in gameData.team2.players ||
         gameData.team1.players.hasAny([request.auth.uid + '@guest']) ||
         gameData.team2.players.hasAny([request.auth.uid + '@guest']));
    }

    function isTournamentParticipant(tournamentData) {
      return request.auth.uid in tournamentData.participants ||
             tournamentData.participants.hasAny([request.auth.uid + '@guest']);
    }

    function isVenueOwner(venueData) {
      return isAuthenticated() && request.auth.uid == venueData.ownerId;
    }

    // Games collection
    match /games/{gameId} {
      allow read: if 
        (resource.data.isPartOfTournament && 
         isTournamentParticipant(get(/databases/$(database)/documents/tournaments/$(resource.data.tournamentId)).data)) ||
        isGameParticipant(resource.data);
      allow create: if isAuthenticated();
      allow update: if 
        (resource.data.isPartOfTournament && 
         isTournamentParticipant(get(/databases/$(database)/documents/tournaments/$(resource.data.tournamentId)).data)) ||
        isGameParticipant(resource.data);
      allow delete: if isGameParticipant(resource.data);
    }

    // User profiles
    match /users/{userId} {
      allow read: if true;  // Allow username checks
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      
      match /friends/{friendId} {
        allow read, write: if isAuthenticated() && 
          (request.auth.uid == userId || request.auth.uid == friendId);
      }
      
      match /friendRequests/{requestId} {
        allow read: if isAuthenticated() && request.auth.uid == userId;
        allow write: if isAuthenticated();
      }
    }

    // User stats
    match /userStats/{userId} {
      allow read, write: if isAuthenticated();
    }

    // Regular tournaments
    match /tournaments/{tournamentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (isTournamentParticipant(resource.data) || 
         resource.data.createdBy == request.auth.uid);
      
      match /presence/{userId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && request.auth.uid == userId;
      }
      
      match /matches/{matchId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && 
          isTournamentParticipant(get(/databases/$(database)/documents/tournaments/$(tournamentId)).data);
      }
    }

    // Client tournaments (venue-hosted tournaments)
    match /client_tournaments/{tournamentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.createdBy || // Tournament creator can do anything
        (
          // Allow team creation/updates for any authenticated user
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['teams', 'participants', 'updatedAt']) &&
          // Basic security checks:
          // 1. User must be part of the team they're adding
          // 2. User must not be in any existing teams
          // 3. Tournament must not be full
          request.auth.uid in request.resource.data.teams[request.resource.data.teams.size() - 1].players &&
          (!('teams' in resource.data) || 
            !resource.data.teams.hasAll([request.auth.uid])) &&
          (!('maxTeams' in resource.data) || 
           !('teams' in resource.data) || 
           resource.data.teams.size() < resource.data.maxTeams)
        ) ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']) // Allow status updates for tournament creator
      );
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.createdBy;
    }

    // Presence
    match /presence/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Venues collection (renamed from venues to match our structure)
    match /venues/{venueId} {
      allow read: if true;  // Allow public read access to venues
      allow create: if isAuthenticated();  // Allow authenticated users to create venues
      allow update: if isAuthenticated() && 
        (isVenueOwner(resource.data) || isAdmin());  // Allow venue owners and admins to update
      allow delete: if isAuthenticated() && 
        (isVenueOwner(resource.data) || isAdmin());  // Allow venue owners and admins to delete
    }

    // Bookings collection
    match /bookings/{bookingId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||  // Booking user can update
        get(/databases/$(database)/documents/venues/$(resource.data.venueId)).data.ownerId == request.auth.uid ||  // Venue owner can update
        isAdmin()  // Admin can update
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||  // Booking user can delete
        get(/databases/$(database)/documents/venues/$(resource.data.venueId)).data.ownerId == request.auth.uid ||  // Venue owner can delete
        isAdmin()  // Admin can delete
      );
    }
  }
} 